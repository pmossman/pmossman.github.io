{"version":3,"sources":["lib/chords.ts","components/ChartCell/ChartCell.tsx","components/Icons/Cross.tsx","components/Icons/Circle.tsx","components/ChartHead/ChartHead.tsx","components/Chart/Chart.tsx","lib/strings.ts","components/SvgText/SvgText.tsx","components/Chord/Chord.tsx","lib/frets.ts","components/ChordPresenter/ChordPresenter.tsx","clusters/chordBrowserCluster.tsx","components/TextInput/TextInput.tsx","components/ChordBrowser/ChordBrowser.tsx","components/TopNav/TopNav.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["CHORD_BANK","A","Am","B","C","D","Dm","E","Em","F","G","asChordShorthand","input","seenB","validEntries","split","length","Error","forEach","entry","includes","parseAndNameChordShorthand","chordString","name","strings","bar","iString","updateBarWithEntry","getStringInChordFromEntry","stringNum","fretNum","Number","stringStart","stringEnd","barred","open","muted","note","getNotesFromChord","chord","notes","Object","keys","getStringHeaders","decorators","entries","stringNumAndString","ChartCell","props","className","orientation","children","BarCell","content","rest","NoteCell","BlankCell","CrossIcon","xmlns","stroke","color","viewBox","strokeWidth","d","CircleIcon","cx","cy","r","fill","ChartHeadItem","headerItem","Cross","Circle","ChartHead","map","key","stringHeaders","ChartClass","getCell","Chart","stringDecorators","cellRows","frets","stringCells","push","row","i","getCells","STANDARD_SIXSTRING","1","stringNumber","2","3","4","5","6","SvgText","display","fontSize","x","y","Chord","numVisibleFrets","getChord","numFrets","Array","_","fretNumber","defaultProps","ChordBox","scale","ChordPresenter","mode","ChordBrowserContext","React","createContext","ChordBrowserProvider","useReducer","chordBrowserReducer","initialState","state","dispatch","Provider","value","useChordBrowser","useContext","getState","getVisibleChords","searchString","chords","filter","toLowerCase","indexOf","setSearchString","str","type","actions","CHANGE_SEARCH_STRING","payload","action","TextInput","onChange","placeholder","FilterChordsInput","e","currentTarget","ChordList","chordName","ChordBrowser","AddChord","Songs","AppRouter","exact","from","to","activeClassName","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4988c219.chunk.js","sourcesContent":["import {\n  TChord,\n  TChordShorthand,\n  TBar,\n  TStringInChord,\n  TStringHeaderMap,\n  TNoteMap\n} from \"../../types\";\n\nexport const CHORD_BANK: { [name: string]: string } = {\n  A: \"x|o|2|2|2|o\",\n  Am: \"x|o|2|2|1|o\",\n  B: \"x|b2|4|4|4|b2\",\n  C: \"x|3|2|o|1|o\",\n  D: \"x|x|o|2|3|2\",\n  Dm: \"x|x|o|2|3|1\",\n  E: \"o|2|2|1|o|o\",\n  Em: \"o|2|2|o|o|o\",\n  F: \"b1|3|3|2|b1|b1\",\n  G: \"3|2|o|o|1|o\"\n};\n\nexport const getChord = (name: string) => {\n  if (!CHORD_BANK[name]) {\n    throw new Error(`Unrecognized chord name: ${name}`);\n  }\n  const chordString = asChordShorthand(CHORD_BANK[name]);\n  return parseAndNameChordShorthand(chordString, name);\n};\n\n// validates and casts an input string into a TChordShorthand.\nexport const asChordShorthand = (input: string) => {\n  const validEntries = [\n    \"x\",\n    \"o\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"b1\",\n    \"b2\",\n    \"b3\",\n    \"b4\",\n    \"b5\"\n  ];\n  const split = input.split(\"|\");\n  let seenB: string;\n  if (!(split.length === 6)) {\n    throw new Error(`Could not split input into six entries`);\n  }\n  split.forEach(entry => {\n    if (!validEntries.includes(entry)) {\n      throw new Error(`Invalid entry: ${entry}`);\n    }\n    if (entry[0] === \"b\") {\n      seenB = seenB || entry[1];\n      if (seenB !== entry[1]) {\n        throw new Error(\"A chord can not include a bar on multiple strings\");\n      }\n    }\n  });\n  return input as TChordShorthand;\n};\n\nexport const parseAndNameChordShorthand = (\n  chordString: TChordShorthand,\n  name: string\n): TChord => {\n  const split = chordString.split(\"|\");\n  const strings: TChord[\"strings\"] = {};\n  let bar: Partial<TBar> = {};\n\n  split.forEach((entry, iString) => {\n    bar = updateBarWithEntry(entry, iString + 1, bar);\n    strings[iString + 1] = getStringInChordFromEntry(entry);\n  });\n\n  return { name, strings, bar: bar as TBar };\n};\n\nconst updateBarWithEntry = (\n  entry: string,\n  stringNum: number,\n  bar: Partial<TBar>\n) => {\n  if (entry[0] === \"b\") {\n    bar.fretNum = bar.fretNum || Number(entry[1]);\n    bar.stringStart = bar.stringStart || stringNum; //only assign stringStart once\n    bar.stringEnd = stringNum; // always reassign stringEnd\n  }\n  return bar;\n};\n\n// for now, entries don't encode any information about the note\n// other than the fret number\nconst getStringInChordFromEntry = (entry: string): TStringInChord => {\n  if (entry === \"o\") {\n    return { barred: false, open: true, muted: false, note: null };\n  }\n  if (entry === \"x\") {\n    return { barred: false, open: false, muted: true, note: null };\n  }\n  if (entry[0] === \"b\") {\n    return { barred: true, open: false, muted: false, note: null };\n  }\n  return {\n    barred: false,\n    open: false,\n    muted: false,\n    note: { fretNum: Number(entry) }\n  };\n};\n\nexport const getNotesFromChord = (chord: TChord): TNoteMap => {\n  const notes: TNoteMap = {};\n  Object.keys(chord.strings).forEach(stringNum => {\n    let chordString = chord.strings[Number(stringNum)];\n    if (chordString.note) {\n      notes[`${stringNum},${chordString.note.fretNum}`] = chordString.note;\n    }\n  });\n  return notes;\n};\n\nexport const getStringHeaders = (chord: TChord): TStringHeaderMap => {\n  const decorators: TStringHeaderMap = {};\n  Object.entries(chord.strings).forEach(stringNumAndString => {\n    let chordString = chord.strings[Number(stringNumAndString[0])];\n    if (chordString.open) {\n      decorators[Number(stringNumAndString[0])] = \"o\";\n    }\n    if (chordString.muted) {\n      decorators[Number(stringNumAndString[0])] = \"x\";\n    }\n  });\n  return decorators;\n};\n","import React from \"react\";\nimport \"./ChartCell.css\";\nimport { IOrientable, TBar } from \"../../../types\";\n\ninterface ChartCellProps extends IOrientable {}\n\ninterface NoteCellProps extends IOrientable {}\ninterface BlankCellProps extends IOrientable {}\ninterface BarCellProps extends IOrientable {\n  bar: TBar;\n  stringNum: number;\n  fretNum: number;\n}\n\nconst ChartCell: React.FC<ChartCellProps> = props => {\n  return (\n    <div className={`ChartCell ${props.orientation}`}>\n      <div className=\"Contents\">{props.children}</div>\n      <div className=\"String\" />\n      <div className=\"Fret\" />\n    </div>\n  );\n};\n\nconst BarCell: React.FC<BarCellProps> = (props: BarCellProps) => {\n  const { stringNum, fretNum, bar, ...rest } = props;\n  let content: React.ReactNode;\n  if (stringNum === bar.stringStart) {\n    content = <div className=\"BarStart\"></div>;\n  } else if (stringNum === bar.stringEnd) {\n    content = <div className=\"BarEnd\"></div>;\n  } else if (stringNum > bar.stringStart && stringNum < bar.stringEnd) {\n    content = <div className=\"BarSegment\"></div>;\n  } else {\n    content = null;\n  }\n  return <ChartCell {...rest}>{content}</ChartCell>;\n};\n\nconst NoteCell: React.FC<NoteCellProps> = (props: NoteCellProps) => {\n  return (\n    <ChartCell {...props}>\n      <div className=\"Note\"></div>\n    </ChartCell>\n  );\n};\n\nconst BlankCell: React.FC<BlankCellProps> = (props: BlankCellProps) => {\n  return <ChartCell {...props} />;\n};\n\nexport { NoteCell, BlankCell, BarCell };\n","import React from \"react\";\n\ninterface CrossIconProps {\n  color: string;\n}\n\nconst CrossIcon: React.FC<CrossIconProps> = props => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      stroke={props.color}\n      viewBox=\"0 0 100 100\"\n    >\n      <path strokeWidth=\"10\" d=\"M10 10L90 90\" />\n      <path strokeWidth=\"10\" d=\"M90 10L10 90\" />\n    </svg>\n  );\n};\n\nexport default CrossIcon;\n","import React from \"react\";\n\ninterface CircleIconProps {\n  color: string;\n}\n\nconst CircleIcon: React.FC<CircleIconProps> = props => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      stroke={props.color}\n      viewBox=\"0 0 100 100\"\n    >\n      <circle cx=\"50\" cy=\"50\" r=\"40\" strokeWidth=\"10\" fill=\"none\" />\n    </svg>\n  );\n};\n\nexport default CircleIcon;\n","import React from \"react\";\nimport \"./ChartHead.css\";\nimport { Cross, Circle } from \"../Icons\";\nimport { TStringHeader, TStringMap, TStringHeaderMap } from \"../../../types\";\n\ninterface ChartHeadItemProps {\n  headerItem: TStringHeader;\n}\ninterface ChartHeadProps {\n  strings: TStringMap;\n  stringHeaders: TStringHeaderMap;\n}\n\nconst ChartHeadItem: React.FC<ChartHeadItemProps> = props => {\n  let content;\n  switch (props.headerItem) {\n    case \"x\":\n      content = <Cross color={\"white\"} />;\n      break;\n    case \"o\":\n      content = <Circle color={\"white\"} />;\n      break;\n    default:\n      content = null;\n      break;\n  }\n  return <div className={\"ChartHeadItem\"}>{content}</div>;\n};\n\nconst ChartHead: React.FC<ChartHeadProps> = props => {\n  return (\n    <div className=\"ChartHead\">\n      <div className=\"TopFret\" />\n      {Object.entries(props.strings).map(stringNumAndString => {\n        return (\n          <ChartHeadItem\n            key={stringNumAndString[0]}\n            headerItem={props.stringHeaders[Number(stringNumAndString[0])]}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ChartHead;\n","import React from \"react\";\nimport \"./Chart.css\";\nimport {\n  TFret,\n  IOrientable,\n  TNoteMap,\n  TBar,\n  TStringHeaderMap,\n  TStringMap\n} from \"../../../types\";\nimport { NoteCell, BlankCell, BarCell } from \"../ChartCell\";\nimport ChartHead from \"../ChartHead/ChartHead\";\n\ninterface ChartProps extends IOrientable {\n  strings: TStringMap;\n  frets: TFret[];\n  notes: TNoteMap;\n  stringDecorators: TStringHeaderMap;\n  bar?: TBar;\n}\n\nconst ChartClass = (props: ChartProps) =>\n  props.orientation === \"tall\" ? \"Chart tall\" : \"Chart wide\";\n\nfunction getCells(props: ChartProps) {\n  const cellRows = [];\n  for (let fretNum = 1; fretNum <= props.frets.length; fretNum++) {\n    let stringCells = [];\n    for (\n      let stringNum = 1;\n      stringNum <= Object.keys(props.strings).length;\n      stringNum++\n    ) {\n      stringCells.push(getCell(stringNum, fretNum, props));\n    }\n    cellRows.push(stringCells);\n  }\n  return (\n    <div className=\"CellRows\">\n      {cellRows.map((row, i) => (\n        <div key={i} className=\"CellRow\">\n          {row}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction getCell(stringNum: number, fretNum: number, props: ChartProps) {\n  if (props.bar && props.bar.fretNum === fretNum) {\n    return (\n      <BarCell\n        key={`${stringNum},${fretNum}`}\n        orientation={props.orientation}\n        bar={props.bar}\n        stringNum={stringNum}\n        fretNum={fretNum}\n      />\n    );\n  } else if (!!props.notes[`${stringNum},${fretNum}`]) {\n    return (\n      <NoteCell\n        key={`${stringNum},${fretNum}`}\n        orientation={props.orientation}\n      />\n    );\n  } else {\n    return (\n      <BlankCell\n        key={`${stringNum},${fretNum}`}\n        orientation={props.orientation}\n      />\n    );\n  }\n}\n\nconst Chart: React.FC<ChartProps> = props => (\n  <div className={ChartClass(props)}>\n    <div className=\"ChartHeadContainer\">\n      <ChartHead\n        strings={props.strings}\n        stringHeaders={props.stringDecorators}\n      />\n    </div>\n    <div className=\"ChartCellsContainer\">{getCells(props)}</div>\n  </div>\n);\n\nexport default Chart;\n","import { TStringMap } from \"../../types\";\n\nexport const STANDARD_SIXSTRING: TStringMap = {\n  1: { stringNumber: 1, name: \"E\" },\n  2: { stringNumber: 2, name: \"A\" },\n  3: { stringNumber: 3, name: \"D\" },\n  4: { stringNumber: 4, name: \"G\" },\n  5: { stringNumber: 5, name: \"B\" },\n  6: { stringNumber: 6, name: \"e\" }\n};\n","import React from \"react\";\n\ninterface SvgTextProps {\n  color: string;\n}\n\nconst SvgText: React.FC<SvgTextProps> = props => {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 100 30\"\n      display=\"block\"\n    >\n      <text fill={props.color} fontSize=\"20\" x=\"0\" y=\"22\">\n        {props.children}\n      </text>\n    </svg>\n  );\n};\n\nexport default SvgText;\n","import React from \"react\";\nimport \"./Chord.css\";\nimport {\n  getChord,\n  getNotesFromChord,\n  getStringHeaders\n} from \"../../lib/chords\";\nimport Chart from \"../Chart\";\nimport { STANDARD_SIXSTRING } from \"../../lib/strings\";\nimport { getFrets } from \"../../lib/frets\";\nimport SvgText from \"../SvgText\";\n\ninterface ChordProps {\n  name: string;\n  numFrets?: number;\n}\n\nconst Chord: React.FC<ChordProps> = props => {\n  const chord = getChord(props.name);\n\n  if (!chord) {\n    throw new Error(\"undefined chord\");\n  }\n\n  return (\n    <div className=\"Chord\">\n      <div className=\"ChordTitle\">\n        <SvgText color=\"white\">{chord.name}</SvgText>\n      </div>\n      <div className=\"ChordChart\">\n        <Chart\n          bar={chord.bar}\n          notes={getNotesFromChord(chord)}\n          strings={STANDARD_SIXSTRING}\n          stringDecorators={getStringHeaders(chord)}\n          frets={getFrets(props.numFrets as number)}\n          orientation={\"tall\"} // chords should always show as a tall chart\n        />\n      </div>\n    </div>\n  );\n};\n\nChord.defaultProps = { numFrets: 5 };\n\nexport default Chord;\n","import { TFret } from \"../../types\";\n\nexport const getFrets = (numVisibleFrets: number): TFret[] => {\n  return [...new Array(numVisibleFrets)].map((_, i) => {\n    return { fretNumber: i + 1 };\n  });\n};\n","import React from \"react\";\nimport \"./ChordPresenter.css\";\nimport Chord from \"../Chord\";\n\ninterface ChordPresenterProps {\n  mode?: \"detailed\" | \"simple\";\n  scale?: \"small\" | \"medium\" | \"large\";\n  chord: string;\n}\n\nconst ChordBox: React.FC<ChordPresenterProps> = props => {\n  const className = `ChordBox scale-${props.scale}`;\n  return <div className={className}>{props.children}</div>;\n};\n\n// TODO move all sizing, display logic from Chord.css to ChordPresenter.css\n// and make classes based on the display props from this component\nconst ChordPresenter: React.FC<ChordPresenterProps> = props => {\n  return (\n    <div className=\"ChordPresenter\">\n      <ChordBox {...props}>\n        <Chord name={props.chord} />\n      </ChordBox>\n    </div>\n  );\n};\n\nChordPresenter.defaultProps = {\n  mode: \"detailed\",\n  scale: \"large\"\n};\n\nexport default ChordPresenter;\n","import React, { useContext, useReducer } from \"react\";\nimport { CHORD_BANK } from \"../lib/chords\";\n\n/*\nI'm trying out an idea of 'clustering' together actions, reducers,\nselectors with a context provider component.\n\nThis file exports three key pieces:\n1) The ChordBrowserContext. I was originally not going to export this,\n   but I'm trying out accessing it in another custom hook, useStorage\n2) the Provider component which grants the ChordBrowser context to the\n   child component tree\n3) a custom hook, useChordBrowser, which exposes selectors and action\n   creators for reading and updating state\n\nI like this so far because any component in the tree can simply grab\nthe appropriate functions off of the custom hook, without knowing\nanything about actions, reducers, etc. Basically, I don't need\na ReactRedux connect()'ed component to access the store and dispatch,\nI just call super readable functions off the hook.\n*/\n\nexport const ChordBrowserContext = React.createContext<IChordBrowserContext>(\n  {} as IChordBrowserContext\n);\n\nexport const ChordBrowserProvider: React.FC = props => {\n  const [state, dispatch] = useReducer(chordBrowserReducer, initialState);\n  return (\n    <ChordBrowserContext.Provider value={{ state, dispatch }}>\n      {props.children}\n    </ChordBrowserContext.Provider>\n  );\n};\n\nexport const useChordBrowser = () => {\n  const { state, dispatch } = useContext(ChordBrowserContext);\n\n  function getState() {\n    return state;\n  }\n\n  function getVisibleChords() {\n    if (state.searchString.length < 1) {\n      return state.chords;\n    } else {\n      return state.chords.filter(\n        chord =>\n          chord.toLowerCase().indexOf(state.searchString.toLowerCase()) > -1\n      );\n    }\n  }\n\n  function setSearchString(str: string) {\n    dispatch({ type: actions.CHANGE_SEARCH_STRING, payload: str });\n  }\n\n  return { getState, getVisibleChords, setSearchString };\n};\n\n// ----------- begin internal state management logic -------------\n\nconst initialState: ChordBrowserState = {\n  searchString: \"\",\n  chords: Object.keys(CHORD_BANK)\n};\n\nconst actions = {\n  CHANGE_SEARCH_STRING: \"CHANGE_SEARCH_STRING\"\n};\n\nconst chordBrowserReducer: React.Reducer<\n  ChordBrowserState,\n  ChordBrowserAction\n> = (state, action) => {\n  switch (action.type) {\n    case actions.CHANGE_SEARCH_STRING:\n      return { ...state, searchString: action.payload };\n    default:\n      return state;\n  }\n};\n\ninterface ChordBrowserState {\n  searchString: string;\n  chords: string[]; // TODO rethink the chord_bank, where should it go?\n}\n\ninterface ChordBrowserAction<PL = any> {\n  type: string;\n  payload: PL;\n}\n\ninterface IChordBrowserContext {\n  state: ChordBrowserState;\n  dispatch: React.Dispatch<ChordBrowserAction>;\n}\n","import React from \"react\";\nimport \"./TextInput.css\";\n\ninterface ITextInputProps {\n  onChange?(e: React.FormEvent<HTMLInputElement>): void;\n  placeholder?: string;\n}\n\nconst TextInput: React.FC<ITextInputProps> = props => {\n  return (\n    <input\n      type=\"text\"\n      className={\"TextInput\"}\n      onChange={props.onChange}\n      placeholder={props.placeholder}\n    />\n  );\n};\n\nexport default TextInput;\n","import React, { useContext, useState } from \"react\";\nimport \"./ChordBrowser.css\";\nimport ChordPresenter from \"../ChordPresenter\";\nimport {\n  useChordBrowser,\n  ChordBrowserProvider\n} from \"../../clusters/chordBrowserCluster\";\nimport TextInput from \"../TextInput\";\n\ninterface ChordBrowserProps {}\n\nconst FilterChordsInput: React.FC = props => {\n  const { setSearchString } = useChordBrowser();\n  return (\n    <TextInput\n      onChange={e => setSearchString(e.currentTarget.value)}\n      placeholder={\"Filter chords...\"}\n    />\n  );\n};\n\nconst ChordList: React.FC = () => {\n  const { getVisibleChords } = useChordBrowser();\n  return (\n    <div className=\"ChordList\">\n      {getVisibleChords().map((chordName, i) => (\n        <ChordPresenter key={i} chord={chordName} scale={\"medium\"} />\n      ))}\n    </div>\n  );\n};\n\nconst ChordBrowser: React.FC<ChordBrowserProps> = props => {\n  return (\n    <ChordBrowserProvider>\n      <div className=\"ChordBrowser\">\n        <FilterChordsInput />\n        <ChordList />\n      </div>\n    </ChordBrowserProvider>\n  );\n};\n\nexport default ChordBrowser;\n","import React from \"react\";\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  NavLink,\n  Redirect\n} from \"react-router-dom\";\nimport ChordBrowser from \"../ChordBrowser\";\nimport \"./TopNav.css\";\n\nfunction AddChord() {\n  return <h2>Add Chord</h2>;\n}\n\nfunction Songs() {\n  return <h2>Songs</h2>;\n}\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <Redirect exact from=\"/\" to=\"/chords/\" />\n      <div className={\"TopNav\"}>\n        <NavLink activeClassName={\"active\"} to=\"/chords/\">\n          Chord Browser\n        </NavLink>\n        <NavLink activeClassName={\"active\"} to=\"/add/\">\n          Add Chord\n        </NavLink>\n        <NavLink activeClassName={\"active\"} to=\"/songs/\">\n          Songs\n        </NavLink>\n      </div>\n\n      <Route path=\"/chords/\" component={ChordBrowser} />\n      <Route path=\"/add/\" component={AddChord} />\n      <Route path=\"/songs/\" component={Songs} />\n    </Router>\n  );\n}\n\nexport default AppRouter;\n","import React from \"react\";\nimport \"./App.css\";\nimport AppRouter from \"../TopNav\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\">\n        <AppRouter />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}